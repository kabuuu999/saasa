import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import bd  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π

import os
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await bd.add_user(message.from_user)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –±—Ä–∞–∫–æ–≤. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏ /help.")

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/marry @username ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫\n"
        "/divorce @username ‚Äî —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å\n"
        "/spouses ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É–ø—Ä—É–≥–æ–≤\n"
    )
    await message.answer(text)

@dp.message_handler(commands=["marry"])
async def cmd_marry(message: types.Message):
    await bd.add_user(message.from_user)
    if not message.reply_to_message and not message.get_args():
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /marry @username")
        return

    target_user = None

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        args = message.get_args().strip()
        if args.startswith("@"):
            username = args[1:]
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            async with bd.aiosqlite.connect(bd.DB_PATH) as db:
                async with db.execute(
                    "SELECT user_id FROM users WHERE username = ?", (username,)
                ) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        target_user = types.User(id=row[0], is_bot=False, first_name=username)
                    else:
                        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º.")
                        return
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /marry @username")
            return

    if target_user.id == message.from_user.id:
        await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return

    if await bd.are_married(message.from_user.id, target_user.id):
        await message.answer(f"–í—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å @{target_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}.")
        return

    proposal_keyboard = InlineKeyboardMarkup(row_width=2)
    proposal_keyboard.add(
        InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.from_user.id}"),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}"),
    )
    await bot.send_message(target_user.id, f"@{message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª(–∞) —Ç–µ–±–µ –±—Ä–∞–∫! –ü—Ä–∏–Ω—è—Ç—å?", reply_markup=proposal_keyboard)
    await message.answer(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{target_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'}.")

@dp.callback_query_handler(lambda c: c.data and (c.data.startswith("accept_") or c.data.startswith("reject_")))
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    action, proposer_id_str = data.split("_")
    proposer_id = int(proposer_id_str)
    responder_id = callback_query.from_user.id

    if action == "accept":
        if await bd.are_married(proposer_id, responder_id):
            await callback_query.answer("–í—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ.")
            return
        await bd.create_marriage(proposer_id, responder_id)
        await callback_query.answer("–ë—Ä–∞–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ‚ù§Ô∏è")
        await bot.send_message(proposer_id, f"@{callback_query.from_user.username} –ø—Ä–∏–Ω—è–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞! üéâ")
        await bot.send_message(responder_id, f"–í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{(await bot.get_chat(proposer_id)).username}!")
    elif action == "reject":
        await callback_query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        await bot.send_message(proposer_id, f"@{callback_query.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞.")
    await callback_query.message.delete()

@dp.message_handler(commands=["divorce"])
async def cmd_divorce(message: types.Message):
    if not message.reply_to_message and not message.get_args():
        await message.answer("–ß—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É–ø—Ä—É–≥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /divorce @username")
        return

    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        args = message.get_args().strip()
        if args.startswith("@"):
            username = args[1:]
            async with bd.aiosqlite.connect(bd.DB_PATH) as db:
                async with db.execute(
                    "SELECT user_id FROM users WHERE username = ?", (username,)
                ) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        target_user = types.User(id=row[0], is_bot=False, first_name=username)
                    else:
                        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º.")
                        return
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /divorce @username")
            return

    if not await bd.are_married(message.from_user.id, target_user.id):
        await message.answer("–í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    await bd.delete_marriage(message.from_user.id, target_user.id)
    await message.answer(f"–í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å @{target_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}.")

@dp.message_handler(commands=["spouses"])
async def cmd_spouses(message: types.Message):
    spouses_ids = await bd.get_spouses(message.from_user.id)
    if not spouses_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—É–ø—Ä—É–≥–æ–≤.")
        return
    text = "–í–∞—à–∏ —Å—É–ø—Ä—É–≥–∏:\n"
    for uid in spouses_ids:
        try:
            user = await bot.get_chat(uid)
            text += f"@{user.username or user.first_name}\n"
        except:
            text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}\n"
    await message.answer(text)

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(bd.init_db())
    executor.start_polling(dp, skip_updates=True)
